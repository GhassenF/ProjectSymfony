<?php

namespace FrontBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;

use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use AppBundle\Form\EventType;
use AppBundle\Entity\Event;
use AppBundle\Entity\Pay;
use AppBundle\Entity\Participant;
use AppBundle\Entity\Comment;





class EvenementController extends Controller
{
    public static $idrecup;
    public function addEventAction(Request $request)
    {        $date=$request->get('Date');
        $date=date_create(date($date));

        $Event = new Event();

        $form = $this->createForm(EventType::class, $Event);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {


            /**
             * @var UploadedFile $file
             */
            $file = $Event->getImagepath();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );


            } catch (FileException $e) {
                // ... handle exception if something happens during file upload

            }
            $pt = $this->getParameter('images_directory');

            $Event->setImagepath($pt . $fileName);
            $Event->setDate($date);
            $em = $this->getDoctrine()->getManager();
            $em->persist($Event);
            $em->flush();
            $this->addFlash('info', 'Evenement ajoutĂ©');
            return $this->redirectToRoute('navAffichageEvent');
        }

        return $this->render('@Front/GEvenements/ajoutevenement.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    public function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function listeEventAction(Request $request)
    {
        $evenements=$this->getDoctrine()->getRepository(Event::class)->findAll();
        return $this->render('@Front/GEvenements/listeevenement.html.twig',array(
            'evenements'=>$evenements
        ));
    }

    public function deleteEventAction(Request $request)
    {
        $id = $request->get('id');
        $em = $this->getDoctrine()->getManager();
        $Event = $em->getRepository('AppBundle:Event')->find($id);
        $em->remove($Event);
        $em->flush();
        return $this->redirectToRoute('navAffichageEvent');
    }

    public function updateEventAction(Request $request)
    {
        $date=$request->get('Date');
        $date=date_create(date($date));
        $id = $request->get('id');

        $em = $this->getDoctrine()->getManager();
        $evenements = $em->getRepository('AppBundle:Event')->find($id);
        $form = $this->createForm(EventType::class, $evenements);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            /**
             * @var UploadedFile $file
             */
            $file = $evenements->getImagepath();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );


            } catch (FileException $e) {
                // ... handle exception if something happens during file upload

            }
            $pt = $this->getParameter('images_directory');

            $evenements->setImagepath($pt . $fileName);
            $evenements->setDate($date);

            $em = $this->getDoctrine()->getManager();
            $em->persist($evenements);
            $em->flush();
            return $this->redirectToRoute('navAffichageEvent');
        }
        return $this->render('@Front/GEvenements/updateevenement.html.twig', array("form" => $form->createView()));
    }

    public function oneEventAction($id,Request $request)
    {
        $user=$this->getUser();
        $em=$this->getDoctrine();
        $evenements=$em->getRepository(Event::class)->find($id);
        $em=$this->getDoctrine()->getManager();
        $review = $em->getRepository(Comment::class)->findEntitiesByKinde();


        if($request->isMethod('POST'))
        {
            $rev=new Comment();
            $date=new \DateTime();
            $rev->setDate($date);
            $rev->setIdUser($user);
            $rev->setIdEvent($evenements);
            $rev->setDescription($request->get('comment'));

            $em=$this->getDoctrine()->getManager();
            $em->persist($rev);
            $em->flush();
            return $this->redirect('oneEvent');
        }


        return $this->render('@Front/GEvenements/oneshowevent.html.twig', array(
            "evenements" => $evenements,'review'=>$review));

    }

    public function participantEventAction(Request $request)
    {
        if($request->isMethod('POST')) {

            $id = $request->get('id');
            $em = $this->getDoctrine()->getManager();
            $evenements = $em->getRepository('AppBundle:Event')->find($id);
            // $idrecup =$request->$_GET['id'];
            $nom = $request->get('nom');
            $prenom = $request->get('prenom');
            $mail = $request->get('mail');
            $cin = $request->get('cin');
            $tlph = $request->get('tlph');





            $participant = new Participant();
            $participant->setNom($nom);
            $participant->setPrenom(($prenom));
            $participant->setMail(($mail));
            $participant->setCin(($cin));
            $participant->setTlph($tlph);

            $cartepay=new Pay();
            $cartepay->setNumcarte($cin);
            $cartepay->setCode($tlph);
            $cartepay->setSolde(4000);

            $participant->setPay($cartepay);

            $em=$this->getDoctrine()->getManager();
            $em->persist($participant);
            $em->persist($cartepay);
            $em->flush();

            return $this->render('@Front/GEvenements/payevent.html.twig',array('id'=>$id));
        }
        return $this->render('@Front/GEvenements/participantevent.html.twig');

    }

    public function payEventAction(Request $request)
    {
$prix=$request->get('prix');

        return $this->render('@Front/GEvenements/payevent.html.twig');
    }


    public function testerpayementAction($numCarte)
    {



    }
    public function payAction()
{
    $articles = $this->getDoctrine()
        ->getRepository(PayEventRepository::class)->incr();

}

    ////////////////////////////////////////


    public function deleteAction($id){
        
        $em=$this->getDoctrine();
        $art=$em->getRepository(Event::class)->find($id);
        $em=$this->getDoctrine()->getManager();
        $review = $em->getRepository(Comment::class)->findEntitiesByIdEv($id);
        foreach ($review as $commente) {
            $em->remove($commente);
            $em->flush();
            return $this->redirect('oneEvent');
        }


        return $this->redirectToRoute('navShowOneEvent',array(
            'art'=>$art,'review'=>$review));
    }
}