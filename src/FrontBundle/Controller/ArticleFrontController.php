<?php
/**
 * Created by PhpStorm.
 * User: user
 * Date: 08/04/2019
 * Time: 22:44
 */

namespace FrontBundle\Controller;


use AppBundle\Entity\Article;
use AppBundle\Entity\Comment;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use UserBundle\Entity\User;
use AppBundle\AppBundle;
use AppBundle\Entity\Statarticle;
use AppBundle\Form\ArticleType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use AppBundle\Repository\ArticleRepository;

class ArticleFrontController extends Controller
{
    public function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function artIAAction(){

        $article=$this->getDoctrine()->getRepository(Article::class)->findAll();
        return $this->render('@Front/ArticleFront/artIA.html.twig',array(
            'article'=>$article
        ));


    }


    //////////////////////////////////////////////////////////////////////////////////

    public function addarticlefAction(Request $request){
        $date=$request->get('Date');
        $date=date_create(date($date));
        $Article = new Article();
        $form = $this->createForm(ArticleType::class, $Article);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {


            /**
             * @var UploadedFile $file
             */
            $file = $Article->getEmplacement();


            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                // $this->getParameter('pdf_directory'),
                    'C:\wamp64\www\brainiacsweb\web\article',
                    $fileName
                );


            } catch (FileException $e) {
                // ... handle exception if something happens during file upload

            }
            $pt = $this->getParameter('pdf_directory');


            $Article->setEmplacement($pt . $fileName);
            $Article->setDate($date);
            $user = $this->getUser();
            $Article->setIdentifiantuser($user);
            $statA = new Statarticle();
            $statA->setScore(0);
            $statA->setNbrvue(0);


            $Article->setStatarticle($statA);

            $em = $this->getDoctrine()->getManager();
            $em->persist($Article);
            $em->persist($statA);
            $em->flush();
            $this->addFlash('info', 'Article ajoutĂ©');
            return $this->redirectToRoute('navAfficherArticleFront');
        }

        return $this->render('@Front/ArticleFront/ajoutart.html.twig', [
            'form' => $form->createView(),
        ]);

    }


    /////////////////////////////////////////////////////////////////////////////


    public function articleDetailsAction($id,Request $request)
    {
        $user=$this->getUser();
        $em=$this->getDoctrine();
        $art=$em->getRepository(Article::class)->find($id);
        $em=$this->getDoctrine()->getManager();
        $review = $em->getRepository(Comment::class)->findEntitiesByKind();


        if($request->isMethod('POST'))
        {
            $rev=new Comment();
            $date=new \DateTime();
            $rev->setDate($date);
            $rev->setIdUser($user);
            $rev->setIdArticle($art);
            $rev->setDescription($request->get('comment'));

            $em=$this->getDoctrine()->getManager();
            $em->persist($rev);
            $em->flush();
          return $this->redirect('artDetails');
        }
        return $this->render('@Front/ArticleFront/articleDetails.html.twig',array(
            'art'=>$art,'review'=>$review
        ));
    }

    public function deleteAction($id){
        $em=$this->getDoctrine();
        $art=$em->getRepository(Article::class)->find($id);
        $em=$this->getDoctrine()->getManager();
        $review = $em->getRepository(Comment::class)->findEntitiesByIdArtc($id);
        foreach ($review as $commente) {
            $em->remove($commente);
            $em->flush();
            return $this->redirect('artDetails');
        }


        return $this->redirectToRoute('articleDetails',array(
            'art'=>$art,'review'=>$review));
    }
    public function afficherFrontAction()
    {
        $em=$this->getDoctrine()->getManager();
        $articles=$em->getRepository('AppBundle:Article')->findAll();
        /*$articles = $this->getDoctrine()
            ->getRepository(Article::class)
            ->findAllOrderedByName();*/

        return $this->render('@Front/ArticleFront/showart.html.twig', array("articles" => $articles));


    }

    public function supprimerFrontAction(Request $request)
    {
        $identifiant = $request->get('identifiant');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository('AppBundle:Article')->find($identifiant);
        $em->remove($Article);
        $em->flush();
        return $this->redirectToRoute('navAfficherArticleFront');
    }

    public function modifierFrontAction(Request $request)
    {
        $identifiant = $request->get('identifiant');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository('AppBundle:Article')->find($identifiant);
        $form = $this->createForm(ArticleType::class, $Article);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $date=$request->get('Date');
            $date=date_create(date($date));
            /**
             * @var UploadedFile $file
             */
            $file = $Article->getEmplacement();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    'C:\wamp64\www\brainiacsweb\web\article',
                    $fileName
                );


            } catch (FileException $e) {
                // ... handle exception if something happens during file upload

            }
            $pt = $this->getParameter('pdf_directory');

            $Article->setEmplacement($pt . $fileName);
            $Article->setDate($date);
            $em = $this->getDoctrine()->getManager();
            $em->persist($Article);
            $em->flush();
            return $this->redirectToRoute('navAfficherArticleFront');
        }
        return $this->render('@Front/ArticleFront/updatefrontArticle.html.twig', array("form" => $form->createView()));


    }

    public function oneArtFrontAction(Request $request){
        $identifiant = $request->get('Id');
        $em = $this->getDoctrine()->getManager();
        $articles = $this->getDoctrine()
            ->getRepository(Article::class)
            ->incr();

        $articles = $em->getRepository('AppBundle:Article')->find($identifiant);


        return $this->render('@Front/ArticleFront/oneshowart.html.twig', array("articles" => $articles));
    }
    public function pdfAction(Request $request)
    {
        $em = $request->get('em');



        $articles = $this->getDoctrine()
            ->getRepository(Article::class)
            ->incr();



        return $this->render('@Front/ArticleFront/pdfview.html.twig', array("emp" => $em));

    }

}