<?php
/**
 * Created by PhpStorm.
 * User: user
 * Date: 08/04/2019
 * Time: 23:41
 */

namespace BackBundle\Controller;


use AppBundle\Entity\Article;
use AppBundle\Entity\Articlearchive;
use AppBundle\Repository\ArticleRepository;
use AppBundle\Entity\Statarticle;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use AppBundle\Form\ArticleType;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;



class ArticleBackController extends Controller
{
    public function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function ajoutAction(Request $request)
    {
        $user = $this->getUser();

        if ($request->isMethod('POST')) {

            $aut = $request->get('auteur');
            $tit = $request->get('titre');
            $jour = $request->get('journal');
            /**
             * @var UploadedFile $file
             */
            $file = $_POST['pathfile'];


            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('pdf_directory'),
                    $fileName
                );


            } catch (FileException $e) {
                // ... handle exception if something happens during file upload

            }
            $pt = $this->getParameter('pdf_directory');
            $Article = new Article();

            $Article->setEmplacement($pt . $fileName);
            $Article->setAuteur($aut);
            $Article->setTitre($tit);
            $Article->setJournal($jour);
            $Article->setDate(new \DateTime('now'));
            $Article->setIdentifiantuser($user);

            $statA = new Statarticle();
            $statA->setScore(0);
            $statA->setNbrvue(0);


            $Article->setStatarticle($statA);

            $em = $this->getDoctrine()->getManager();
            $em->persist($Article);
            $em->persist($statA);
            $em->flush();

            return $this->redirectToRoute('tableBasic');


        }
        return $this->render('@Back/ArticleBack/espaceAjout.html.twig');
    }


    public function afficherAction()
    {

        // $em=$this->getDoctrine()->getManager();
        //  $articles=$em->getRepository('AppBundle:Article')->findAll();
        $articles = $this->getDoctrine()
            ->getRepository(Article::class)
            ->findAllOrderedByName();

        return $this->render('@Back/ArticleBack/tableBasique.html.twig', array("Articles" => $articles));


    }

    public function deleteAction(Request $request)
    {
        $id = $request->get('Id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository('AppBundle:Article')->find($id);
        $em->remove($Article);
        $em->flush();
        return $this->redirectToRoute('tableBasic');
    }

    public function updateAction(Request $request)
    {
        $id = $request->get('Id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository('AppBundle:Article')->find($id);
        $form = $this->createForm(ArticleType::class, $Article);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            /**
             * @var UploadedFile $file
             */
            $file = $Article->getEmplacement();

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    'C:\wamp64\www\brainiacsweb\web\article',
                    $fileName
                );


            } catch (FileException $e) {
                // ... handle exception if something happens during file upload

            }
            $pt = $this->getParameter('pdf_directory');

            $Article->setEmplacement($pt . $fileName);
            $em = $this->getDoctrine()->getManager();
            $em->persist($Article);
            $em->flush();
            return $this->redirectToRoute('tableBasic');
        }
        return $this->render('@Back/ArticleBack/updateArticle.html.twig', array("form" => $form->createView()));


    }

    public function incrementNbrVueAction(Request $request)
    {
        $id = $request->get('Id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository('AppBundle:Article')->find($id);


        $articles = $this->getDoctrine()
            ->getRepository(Article::class)
            ->incr();

        $articles = $this->getDoctrine()
            ->getRepository(Article::class)
            ->findAllOrderedByName();

         return $this->render('@Back/ArticleBack/tableBasique.html.twig', array("Articles" => $articles));

    }

    public function addArticleAction(Request $request)
    {
        $Article = new Article();
        $form = $this->createForm(ArticleType::class, $Article);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {


            /**
             * @var UploadedFile $file
             */
            $file = $Article->getEmplacement();


            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                // $this->getParameter('pdf_directory'),
                    'C:\wamp64\www\brainiacsweb\web\article',
                    $fileName
                );


            } catch (FileException $e) {
                // ... handle exception if something happens during file upload

            }
            $pt = $this->getParameter('pdf_directory');


            $Article->setEmplacement($pt . $fileName);
            $user = $this->getUser();
            $Article->setIdentifiantuser($user);
            $Article->setDate(new \DateTime('now'));

            $statA = new Statarticle();
            $statA->setScore(0);
            $statA->setNbrvue(0);


            $Article->setStatarticle($statA);

            $em = $this->getDoctrine()->getManager();
            $em->persist($Article);
            $em->persist($statA);
            $em->flush();
            $this->addFlash('info', 'Article ajoutÃ©');
            return $this->redirectToRoute('tableBasic');
        }

        return $this->render('@Back/ArticleBack/espaceAdd.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    public function archiverArticleAction(Request $request)
    {
        $id = $request->get('Id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository('AppBundle:Article')->find($id);
        $idu = $Article->getIdentifiantuser();
        $emp = $Article->getEmplacement();
        $aut = $Article->getAuteur();
        $tit = $Article->getTitre();
        $jr = $Article->getJournal();
        $d = $Article->getDate();
        $st = $Article->getStatarticle();
        $Article->setDate(new \DateTime('now'));
        $ArticleArchive = new Articlearchive();
        $ArticleArchive->setEmplacement($emp);
        $ArticleArchive->setDate($d);
        $ArticleArchive->setJournal($jr);
        $ArticleArchive->setAuteur($aut);
        $ArticleArchive->setTitre($tit);
        $ArticleArchive->setIdentifiantuser($idu);
        $ArticleArchive->setStatarticle($st);
        $em->remove($Article);
        $em->persist($ArticleArchive);
        $em->flush();
        return $this->redirectToRoute('tableBasic');

    }

    public function afficherArchiveAction()
    {


        $em = $this->getDoctrine()->getManager();
        $articles = $em->getRepository('AppBundle:Articlearchive')->findAll();

        return $this->render('@Back/ArticleBack/tableArchive.html.twig', array("Articles" => $articles));


    }
    public function afficherStatGenAction()
    {
        $pieChart = new PieChart();
        $em= $this->getDoctrine();
        $articles = $em->getRepository(Article::class)->findAll();
        $totalnbrvue=0;
        foreach($articles as $article) { $totalnbrvue=$totalnbrvue+$article->getStatarticle()->getNbrvue(); }
        $data= array();
        $stat=['Titre', 'nbVue'];
        $nb=0; array_push($data,$stat);
        foreach($articles as $article)
        {$stat=array();
        array_push($stat,$article->getTitre(),(($article->getStatarticle()->getNbrvue()) *100)/$totalnbrvue);
        $nb=($article->getStatarticle()->getNbrvue() *100)/$totalnbrvue; $stat=[$article->getTitre(),$nb];
        array_push($data,$stat); }
        $pieChart->getData()->setArrayToDataTable( $data );
        $pieChart->getOptions()->setTitle('Pourcentages des nombre de vues par article');
        $pieChart->getOptions()->setHeight(500);
        $pieChart->getOptions()->setWidth(900);
        $pieChart->getOptions()->getTitleTextStyle()->setBold(true);
        $pieChart->getOptions()->getTitleTextStyle()->setColor('#009900');
        $pieChart->getOptions()->getTitleTextStyle()->setItalic(true);
        $pieChart->getOptions()->getTitleTextStyle()->setFontName('Arial');
        $pieChart->getOptions()->getTitleTextStyle()->setFontSize(20);
        return $this->render('@Back/ArticleBack/statistiqueGenerale.html.twig', array('piechart' => $pieChart)); }



    public function pdfAction(Request $request)
    {
        $em = $request->get('em');



        $articles = $this->getDoctrine()
            ->getRepository(Article::class)
            ->incr();



        return $this->render('@Back/ArticleBack/pdf.html.twig', array("emp" => $em));

    }

}